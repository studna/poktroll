// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pokt-network/poktroll/pkg/client (interfaces: ApplicationQueryClient)

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/pokt-network/poktroll/x/application/types"
)

// MockApplicationQueryClient is a mock of ApplicationQueryClient interface.
type MockApplicationQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationQueryClientMockRecorder
}

// MockApplicationQueryClientMockRecorder is the mock recorder for MockApplicationQueryClient.
type MockApplicationQueryClientMockRecorder struct {
	mock *MockApplicationQueryClient
}

// NewMockApplicationQueryClient creates a new mock instance.
func NewMockApplicationQueryClient(ctrl *gomock.Controller) *MockApplicationQueryClient {
	mock := &MockApplicationQueryClient{ctrl: ctrl}
	mock.recorder = &MockApplicationQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationQueryClient) EXPECT() *MockApplicationQueryClientMockRecorder {
	return m.recorder
}

// GetApplication mocks base method.
func (m *MockApplicationQueryClient) GetApplication(arg0 context.Context, arg1 string) (types.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1)
	ret0, _ := ret[0].(types.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockApplicationQueryClientMockRecorder) GetApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockApplicationQueryClient)(nil).GetApplication), arg0, arg1)
}
