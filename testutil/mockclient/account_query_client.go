// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pokt-network/poktroll/pkg/client (interfaces: AccountQueryClient)

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountQueryClient is a mock of AccountQueryClient interface.
type MockAccountQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountQueryClientMockRecorder
}

// MockAccountQueryClientMockRecorder is the mock recorder for MockAccountQueryClient.
type MockAccountQueryClientMockRecorder struct {
	mock *MockAccountQueryClient
}

// NewMockAccountQueryClient creates a new mock instance.
func NewMockAccountQueryClient(ctrl *gomock.Controller) *MockAccountQueryClient {
	mock := &MockAccountQueryClient{ctrl: ctrl}
	mock.recorder = &MockAccountQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountQueryClient) EXPECT() *MockAccountQueryClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountQueryClient) GetAccount(arg0 context.Context, arg1 string) (types.AccountI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountQueryClientMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountQueryClient)(nil).GetAccount), arg0, arg1)
}
